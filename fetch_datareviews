import os
import requests
import sqlalchemy as db
from sqlalchemy.orm import sessionmaker
from datetime import datetime

# Yelp API setup
API_KEY = os.getenv("YELP_API_KEY") 
headers = {"Authorization": f"Bearer {API_KEY}"}
reviews_url_template = "https://api.yelp.com/v3/businesses/{}/reviews"

# Database setup
DATABASE_URL = os.getenv("DATABASE_URL")
engine = db.create_engine(DATABASE_URL)
connection = engine.connect()
metadata = db.MetaData()
restaurants = db.Table('Restaurants', metadata, autoload_with=engine)
reviews = db.Table('Reviews', metadata, autoload_with=engine)

# Session setup
Session = sessionmaker(bind=engine)
session = Session()

# Query restaurants with a Yelp URL but without reviews in the Reviews table, limited to 8 for testing
restaurant_entries = (
    session.query(restaurants)
    .filter(restaurants.c.YelpURL.like('https://www.yelp.com/biz/%'))  # Yelp URL filter
    .filter(~db.exists().where(reviews.c.RestaurantID == restaurants.c.RestaurantID))
    .limit(20)  # Limit to 8 restaurants for testing
    .all()
)

print(f"Found {len(restaurant_entries)} restaurants with Yelp URLs and without reviews.")

for restaurant in restaurant_entries:
    yelp_url = restaurant.YelpURL
    yelp_id = yelp_url.split('/')[-1]  # Extract Yelp ID from URL

    # Fetch reviews for this restaurant
    reviews_response = requests.get(reviews_url_template.format(yelp_id), headers=headers)
    reviews_data = reviews_response.json().get('reviews', [])
    
    # Debug print for API response
    print(f"Fetched reviews for {restaurant.Name}: {reviews_data}")
    
    # Insert each review into the Reviews table
    for review in reviews_data:
        review_entry = {
            'RestaurantID': restaurant.RestaurantID,
            'UserID': None,  # Set to None if no UserID data is available
            'Rating': review['rating'],
            'Comment': review['text'],
            'ReviewDate': datetime.strptime(review['time_created'], "%Y-%m-%d %H:%M:%S")
        }
        
        # Print the review data before insertion
        print(f"Inserting review for {restaurant.Name}: {review_entry}")
        
        # Insert review with error handling and commit after each
        try:
            review_insert_stmt = db.insert(reviews).values(review_entry)
            session.execute(review_insert_stmt)
            session.commit()  # Commit after each insert
            print(f"Successfully inserted review for restaurant: {restaurant.Name}")
        except Exception as e:
            print(f"Failed to insert review for {restaurant.Name}: {e}")
            session.rollback()  # Roll back on error to avoid partial commits

# Close session
session.close()

